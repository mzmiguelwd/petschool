"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""


import os
from pathlib import Path
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Defines the base directory of the Django project.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)+q*6y5n0h9l)@4h$pxgcpbbl=vsrri9+e*b4!zl15xq$=#o1='

# SECURITY WARNING: don't run with debug turned on in production!
# Setting DEBUG to True enables detailed error pages and development features.
DEBUG = True

# Sepecifies the hostnames that this Django site can server.
# Empty list allows access only via 'localhost' and '127.0.0.1' during development.
ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django core apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'corsheaders',      # Enables Cross-Origin Resource Sharing (CORS)
    'rest_framework',   # Enables Django REST Framework for API development
    'drf_spectacular',  # Required for OpenAPI schema generation (Swagger/Redoc)

    # Local project apps
    'users',             # Registered local app for user management
    'matriculas'
]

MIDDLEWARE = [
    # Security and session handling
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # CORS Middleware must be placed before CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.common.CommonMiddleware',

    # CSRF protection
    'django.middleware.csrf.CsrfViewMiddleware',

    # Authentication and messaging
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # Clickjacking protection
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Specifies the main URL configuration file
ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,   # Allows Django to look for templates inside application directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Defines the entry point for WSGI-compatible web servers (e.g., Gunicorn)
WSGI_APPLICATION = 'django_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Loads environment variables from a .env file into the system environment
load_dotenv()

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # Specifies PostgreSQL database engine
        # Retrieves database credentials from environment variables for secutiry and deployment flexibility
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # Checks for similarity to user attributes (username, email)
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    # Enforces a minimun length for passwords
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # Checks against common, easily guessable passwords
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    # Requires passwords to contain at least one numeric digit
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTH_USER_MODEL = 'users.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Default language code for the project
LANGUAGE_CODE = 'en-us'

# Time zone specification
TIME_ZONE = 'UTC'

# Enable Django's translation system
USE_I18N = True

# Enable timezone support
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Base URL for serving static files
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# Sets the default primary key type for models to BigAutoField
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CORS Settings ---
# List of origins that are authorized to make cross-site HTTP requests.
# This allows the React fron-end (running on port 5173) to communicate with the Django API.
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173"
]

# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    # Sets the default schema class for automatic API documentation (drf-spectacular)
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# --- DRF Spectacular Settings (OpenAPI/Swagger) ---
SPECTACULAR_SETTINGS = {
    'TITLE': 'Django-PS-React-API',
    'DESCRIPTION': 'API for managing a canine school with Django and React',
    'VERSION': '1.0.0',
    # Prevents serving the schema file itself alongside the UI
    'SERVE_INCLUDE_SCHEMA': False,
}
